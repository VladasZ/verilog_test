module serial_sender #(
    DATA_SIZE = 8 : DATA_SIZE > 0
    )(
    input clk,
    input send,
    input data[DATA_SIZE * 8],
    input serial_busy,
    output busy,
    output skip,
    output new_tx,
    output tx_data[8],
    output is_sending
  ) {
    
  .clk(clk) {
     dff current_byte[$clog2(DATA_SIZE) + 1]; 
     fsm state = { IDLE, SENDING };
     dff data_storage[DATA_SIZE][8];
     dff busy_state;
     edge_detector send_detector(#RISE(1), #FALL(0));
  }
  
  always {
      
    new_tx = 0;
    skip = 0;
    tx_data = 8hxx;  
    
    send_detector.in = send;
    
    busy_state.d = state.q == state.SENDING || serial_busy;
    busy = busy_state.q;
        
    is_sending = state.q == state.SENDING;
    
    //data_storage.d[0] = c{1, 0, 0, 0, 0, 0, 0, 0};
    //data_storage.d[1] = c{0, 1, 0, 0, 0, 0, 0, 0};
    //data_storage.d[2] = c{0, 0, 1, 0, 0, 0, 0, 0};
    //data_storage.d[3] = c{0, 0, 0, 1, 0, 0, 0, 0};
    //data_storage.d[4] = c{0, 0, 0, 0, 1, 0, 0, 0};
    //data_storage.d[5] = c{0, 0, 0, 0, 0, 1, 0, 0};
    //data_storage.d[6] = c{0, 0, 0, 0, 0, 0, 1, 0};
    //data_storage.d[7] = c{0, 0, 0, 0, 0, 0, 0, 1};    
    
    case (state.q) {
      state.IDLE:
        
        current_byte.d = 0;
                
        if (send_detector.out) {
          state.d = state.SENDING;
          
          data_storage.d[0] = data[7  :  0];
          data_storage.d[1] = data[15 :  8];
          data_storage.d[2] = data[23 : 16];
          data_storage.d[3] = data[31 : 24];
          data_storage.d[4] = data[39 : 32];
          data_storage.d[5] = data[47 : 40];
          data_storage.d[6] = data[55 : 48];
          data_storage.d[7] = data[63 : 56];    
        }
       
      state.SENDING:
        if (!serial_busy) {
          new_tx = 1;
          tx_data = data_storage.q[current_byte.q];
          current_byte.d = current_byte.q + 1;
          
          if (current_byte.q == DATA_SIZE)
            state.d = state.IDLE;          
        }
        
        if (send_detector.out)
          skip = 1;
    }
  }
}
